input {

    udp {
        port => <%= @collectd_port %>
        buffer_size => 1452
        codec => collectd{}
        type => "collectd"
    }

    file {
        path => "/etc/demo/logging.log"
        type => "log4j"
    }

    file {
        path => "/etc/demo/logs/access_log-20141019"
        type => "logstash"
        start_position => "beginning"
    }
}

filter {
    if [type] == "collectd" {

    } else if [type] == "log4j" {
        grok {
          match => {"message" => '%{TIMESTAMP_ISO8601:timer} %{LOGLEVEL:level} %{WORD:class} \[%{WORD:thread}\] %{GREEDYDATA:log_message}' }
        }
        date {
            match => ["timer", "ISO8601"]
        }
    } else if [type] == "logstash" {
        grok {
          match => {"message" => '%{COMBINEDAPACHELOG}' }
        }
        useragent {
            source => "agent"
            target => "useragent"
            remove_field => "agent"
        }
        date {
            match => [ "timestamp", "dd/MMM/YYYY:HH:mm:ss Z"]
        }
        geoip {
            source => "clientip"
            target => "geoip"
            database => "/etc/logstash/GeoLiteCity.dat"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float"]
        }
    }
}


output {

    elasticsearch {
        <% @mastnodes = scope.function_hiera(['elastic_cluster::clientnodes']) -%>
        hosts => [<%= @mastnodes.map{ |node| "\"#{node}\"" }.join(',') %>]
        index => "%{type}-%{+YYYY.MM.dd}"
    }
}

